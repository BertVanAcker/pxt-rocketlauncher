<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="drD1s1x~4azmQD5]mdl6">strip</variable><variable id="6?H,z9KOI,_3fI?NdLG=">rocket</variable><variable id="/aEoD46P^@5y?a4tA=2S">RocketLaunchState</variable></variables><block type="pxt-on-start" id="B|DP1/_CL8J+#c[5^Uft" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Iu1qK4:.x[vW(vgcEoxh" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RocketLaunchState {" line1="    //% block=&quot;Disarmed&quot;" line2="    Disarmed," line3="    //% block=&quot;Armed&quot;" line4="    Armed," line5="    //% block=&quot;Error&quot;" line6="    Error" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="6a0|bXDRy])x@=wZ2C0T" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace rocketlauncher {" line1="    " line2="" line3="" line4="    export class rocket {" line5="        launchpin: DigitalPin;" line6="        countdown: number; // countdown in milliseconds" line7="        name: String;" line8="        mode: RocketLaunchState;" line9="" line10="        /**" line11="         * initiate the launch sequence." line12="         */" line13="        //% blockId=&quot;initiate-launch&quot; block=&quot;%Rocket.|launch&quot; blockGap=8" line14="        //% rocket.defl=rocket" line15="        //% weight=79" line16="        //% parts=&quot;rocket&quot;" line17="        initiateLaunch() {" line18="            if(this.mode==RocketLaunchState.Armed){" line19="                //start countdown" line20="                basic.pause(this.countdown);" line21="                //write pin 1 to HIGH " line22="                pins.digitalWritePin(DigitalPin.P1, 1)" line23="                // cooldown and shutdown" line24="                basic.pause(500);" line25="                pins.digitalWritePin(DigitalPin.P1, 0)" line26="            }" line27="            else{" line28="                this.mode=RocketLaunchState.Error" line29="            }" line30="        }" line31="" line32="        /**" line33="         * Set the rocket state" line34="         * @param rocketState" line35="         */" line36="        //% blockId=&quot;set_rocket_state&quot; block=&quot;Set rocket state to %RocketLaunchState|&quot;" line37="        //% weight=80 blockGap=8" line38="        setRocketState(rocketState: RocketLaunchState): void {" line39="" line40="            if (rocketState == RocketLaunchState.Armed) {" line41="                //write pin 0 to HIGH " line42="                pins.digitalWritePin(DigitalPin.P0, 1)" line43="            }" line44="            else if (rocketState == RocketLaunchState.Disarmed) {" line45="                //write pin 0 to LOW" line46="                pins.digitalWritePin(DigitalPin.P0, 0)" line47="            }" line48="" line49="        }" line50="" line51="" line52="    }" line53="" line54="/**" line55=" * " line56=" * VISIBLE FUNCTIONS" line57=" * " line58=" */" line59="" line60="    /**" line61="         * Create a new rocket " line62="         * @param launchpin the pin where the rocket launch mechanism is conneted to." line63="         * @param countdown" line64="         */" line65="    //% blockId=&quot;rocket_create&quot; block=&quot;Initialize rocket with name %_name|with launch delay %countdown|on launchpin %launchpin&quot;" line66="    //% weight=90 blockGap=8" line67="    //% parts=&quot;rocket&quot;" line68="    //% trackArgs=0,2" line69="    //% blockSetVariable=strip" line70="    export function create(launchpin: DigitalPin,countdown:number, name: String, mode: RocketLaunchState): rocket {" line71="        let r = new rocket();" line72="        r.name=name" line73="        r.countdown = countdown" line74="        r.mode = mode" line75="        return r;" line76="    }" line77="" line78="" line79="" line80="    " line81="}" numlines="82"></mutation></block></next></block></statement></block></xml>