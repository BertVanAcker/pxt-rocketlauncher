<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="6O=oR7pK`^b/X3{PCu82" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="(Rz(~WpGF}6%~Vq/GQ#6" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RocketLaunchState {" line1="    //% block=&quot;Disarmed&quot;" line2="    Disarmed," line3="    //% block=&quot;Armed&quot;" line4="    Armed," line5="    //% block=&quot;Error&quot;" line6="    Error" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="3{!t`1~mZgZLA}hg2!#8" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace rocketlauncher {" line1="    " line2="" line3="" line4="    export class rocket {" line5="        launchpin: DigitalPin;" line6="        countdown: number; // countdown in milliseconds" line7="        name: String;" line8="        mode: RocketLaunchState;" line9="" line10="        /**" line11="         * initiate the launch sequence." line12="         */" line13="        //% blockId=&quot;initiate-launch&quot; block=&quot;%Rocket| launch&quot; blockGap=8" line14="        //% rocket.defl=rocket" line15="        //% weight=79" line16="        //% parts=&quot;rocket&quot;" line17="        initiateLaunch() {" line18="            if(this.mode==RocketLaunchState.Armed){" line19="                //start countdown" line20="                basic.pause(this.countdown);" line21="                //write pin 1 to HIGH " line22="                pins.digitalWritePin(this.launchpin, 1)" line23="                " line24="                // cooldown and shutdown" line25="                basic.pause(500);" line26="                pins.digitalWritePin(this.launchpin, 0)" line27="            }" line28="            else{" line29="                this.mode=RocketLaunchState.Error" line30="            }" line31="        }" line32="" line33="        /**" line34="         * Set the rocket state" line35="         * @param rocketState" line36="         */" line37="        //% blockId=&quot;set_rocket_state&quot; block=&quot;Set rocket state to %RocketLaunchState|&quot;" line38="        //% weight=80 blockGap=8" line39="        setRocketState(rocketState: RocketLaunchState): void {" line40="" line41="            if (rocketState == RocketLaunchState.Armed) {" line42="                //write pin 0 to HIGH " line43="                pins.digitalWritePin(DigitalPin.P0, 1)" line44="            }" line45="            else if (rocketState == RocketLaunchState.Disarmed) {" line46="                //write pin 0 to LOW" line47="                pins.digitalWritePin(DigitalPin.P0, 0)" line48="            }" line49="" line50="        }" line51="" line52="" line53="    }" line54="" line55="/**" line56=" * " line57=" * VISIBLE FUNCTIONS" line58=" * " line59=" */" line60="" line61="    /**" line62="         * Create a new rocket " line63="         * @param launchpin the pin where the rocket launch mechanism is conneted to." line64="         * @param countdown" line65="         */" line66="    //% blockId=&quot;rocket_create&quot; block=&quot;Initialize rocket|on launchpin %launchpin|with launch delay %countdown|pre-arm state %RocketLaunchState&quot;" line67="    //% weight=90 blockGap=8" line68="    //% parts=&quot;rocket&quot;" line69="    //% trackArgs=0,2" line70="    //% blockSetVariable=strip" line71="    export function create(launchpin: DigitalPin,countdown:number, mode: RocketLaunchState): rocket {" line72="        let r = new rocket();" line73="        r.countdown = countdown" line74="        r.mode = mode" line75="        return r;" line76="    }" line77="" line78="" line79="" line80="    " line81="}" numlines="82"></mutation></block></next></block></statement></block></xml>