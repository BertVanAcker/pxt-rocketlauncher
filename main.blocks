<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="W3Fv7q%YaAX^rd#geUY0">state</variable><variable id=";[Aos^FfnBTF4An6iB#t">rocket</variable></variables><block type="pxt-on-start" id="XQ}9Ikt.%])gCR-JtHz@" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=")$zjI,6,WeQJzu|tVH(B" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RocketLaunchState {" line1="    //% block=&quot;Disarmed&quot;" line2="    Disarmed," line3="    //% block=&quot;Armed&quot;" line4="    Armed," line5="    //% block=&quot;Error&quot;" line6="    Error" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="NeV.gcKn@-omJ:dny.P@" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace rocketlauncher {" line1="    " line2="" line3="" line4="    export class rocket {" line5="        launchpin: DigitalPin;" line6="        countdown: number; // countdown in milliseconds" line7="        name: String;" line8="        mode: RocketLaunchState;" line9="" line10="        /**" line11="         * initiate the launch sequence." line12="         */" line13="        //% blockId=&quot;initiate-launch&quot; block=&quot;%Rocket| launch&quot; blockGap=8" line14="        //% rocket.defl=rocket" line15="        //% weight=79" line16="        //% parts=&quot;rocket&quot;" line17="        initiateLaunch() {" line18="            if(this.mode==RocketLaunchState.Armed){" line19="                //start countdown" line20="                basic.pause(this.countdown);" line21="                //write pin 1 to HIGH " line22="                pins.digitalWritePin(this.launchpin, 1)" line23="                " line24="                // cooldown and shutdown" line25="                basic.pause(500);" line26="                pins.digitalWritePin(this.launchpin, 0)" line27="            }" line28="            else{" line29="                this.mode=RocketLaunchState.Error" line30="            }" line31="        }" line32="" line33="        /**" line34="         * Set the rocket state" line35="         * @param state" line36="         */" line37="        //% rocket.defl=rocket" line38="        //% blockId=&quot;set_rocket_state&quot; block=&quot;Set rocket state to %state&quot;" line39="        //% weight=80 blockGap=8" line40="        setRocketState(state: RocketLaunchState): void {" line41="" line42="            if (state == RocketLaunchState.Armed) {" line43="                //write pin 0 to HIGH " line44="                pins.digitalWritePin(DigitalPin.P0, 1)" line45="            }" line46="            else if (state == RocketLaunchState.Disarmed) {" line47="                //write pin 0 to LOW" line48="                pins.digitalWritePin(DigitalPin.P0, 0)" line49="            }" line50="" line51="        }" line52="" line53="" line54="    }" line55="" line56="/**" line57=" * " line58=" * VISIBLE FUNCTIONS" line59=" * " line60=" */" line61="" line62="    /**" line63="         * Create a new rocket " line64="         * @param launchpin the pin where the rocket launch mechanism is conneted to." line65="         * @param countdown" line66="         * @param RocketLaunchState" line67="         */" line68="    //% blockId=&quot;rocket_create&quot; block=&quot;Initialize rocket|on launchpin %launchpin|with launch delay %countdown|pre-arm state %RocketLaunchState&quot;" line69="    //% weight=90 blockGap=8" line70="    //% parts=&quot;rocket&quot;" line71="    //% trackArgs=0,2" line72="    //% blockSetVariable=rocket" line73="    export function create(launchpin: DigitalPin,countdown:number, mode: RocketLaunchState): rocket {" line74="        let r = new rocket();" line75="        r.countdown = countdown" line76="        r.mode = mode" line77="        return r;" line78="    }" line79="" line80="" line81="" line82="    " line83="}" numlines="84"></mutation></block></next></block></statement></block></xml>