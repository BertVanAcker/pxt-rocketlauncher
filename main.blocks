<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="Mh56l7=sgfEFm(~lzOMC">rocket</variable></variables><block type="pxt-on-start" id="zzcI5vh1`!bM[+})`OC8" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="-{p6NC?tpML`%~b!su1v" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let rocket: rocketlauncher.rocket = null" numlines="1" declaredvars="rocket"></mutation><next><block type="typescript_statement" id="1#ADrcA6k%o{@(+8sSJF" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RocketLaunchState {" line1="    //% block=&quot;Disarmed&quot;" line2="    Disarmed," line3="    //% block=&quot;Armed&quot;" line4="    Armed," line5="    //% block=&quot;Error&quot;" line6="    Error" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="Iehrnv17gHeomyQ@qQfp" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace rocketlauncher {" line1="    " line2="" line3="" line4="    export class rocket {" line5="        launchpin: DigitalPin;" line6="        countdown: number; // countdown in milliseconds" line7="        name: String;" line8="        mode: RocketLaunchState;" line9="" line10="        /**" line11="         * initiate the launch sequence." line12="         */" line13="        //% blockId=&quot;initiate-launch&quot; block=&quot;%Rocket| launch&quot; blockGap=8" line14="        //% rocket.defl=rocket" line15="        //% weight=79" line16="        //% parts=&quot;rocket&quot;" line17="        initiateLaunch() {" line18="            if(this.mode==RocketLaunchState.Armed){" line19="                //start countdown" line20="                basic.pause(this.countdown);" line21="                //write pin 1 to HIGH " line22="                pins.digitalWritePin(this.launchpin, 1)" line23="                " line24="                // cooldown and shutdown" line25="                basic.pause(500);" line26="                pins.digitalWritePin(this.launchpin, 0)" line27="            }" line28="            else{" line29="                this.mode=RocketLaunchState.Error" line30="            }" line31="        }" line32="" line33="        /**" line34="         * Set the rocket state" line35="         * @param state" line36="         */" line37="        //% rocket.defl=rocket" line38="        //% blockId=&quot;set_rocket_state&quot; block=&quot;Set rocket state to %state&quot;" line39="        //% weight=80 blockGap=8" line40="        setRocketState(state: RocketLaunchState): void {" line41="" line42="            if (state == RocketLaunchState.Armed) {" line43="                //write pin 0 to HIGH " line44="                pins.digitalWritePin(DigitalPin.P0, 1)" line45="            }" line46="            else if (state == RocketLaunchState.Disarmed) {" line47="                //write pin 0 to LOW" line48="                pins.digitalWritePin(DigitalPin.P0, 0)" line49="            }" line50="" line51="        }" line52="" line53="        /**" line54="             * Rocket state" line55="             */" line56="        //% blockId=rocket_state block=&quot;is armed?&quot;" line57="        isArmed(): boolean{" line58="            return(this.mode==RocketLaunchState.Armed)" line59="" line60="        }" line61="" line62="" line63="    }" line64="" line65="/**" line66=" * " line67=" * VISIBLE FUNCTIONS" line68=" * " line69=" */" line70="" line71="    /**" line72="         * Create a new rocket " line73="         * @param launchpin the pin where the rocket launch mechanism is conneted to." line74="         * @param countdown" line75="         * @param RocketLaunchState" line76="         */" line77="    //% blockId=&quot;rocket_create&quot; block=&quot;Initialize rocket|on launchpin %launchpin|with launch delay %countdown|pre-arm state %RocketLaunchState&quot;" line78="    //% weight=90 blockGap=8" line79="    //% parts=&quot;rocket&quot;" line80="    //% trackArgs=0,2" line81="    //% blockSetVariable=rocket" line82="    export function create(launchpin: DigitalPin,countdown:number, mode: RocketLaunchState): rocket {" line83="        let r = new rocket();" line84="        r.launchpin = launchpin" line85="        r.countdown = countdown" line86="        r.mode = mode" line87="        return r;" line88="    }" line89="" line90="" line91="" line92="    " line93="}" numlines="94"></mutation><next><block type="variables_set" id="wPr4-utX,J_~JY1(*KLm"><field name="VAR" id="Mh56l7=sgfEFm(~lzOMC">rocket</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="rocket_create" id="$3km_;.k#y_.)2Vjs+0r"><field name="launchpin">DigitalPin.P2</field><field name="RocketLaunchState">RocketLaunchState.Disarmed</field><value name="countdown"><shadow type="math_number" id="eOmfbnh#gU-(KJRP+h}]"><field name="NUM">1500</field></shadow></value></block></value></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="^}of0#ber,6B^rilD6Sg" x="28" y="4337"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="initiate-launch" id="(ugC^-PzCfP%{zC_=})G"><value name="Rocket"><block type="variables_get" id="Xb,E*:^T{E)Kd2E~ZK,l"><field name="VAR" id="Mh56l7=sgfEFm(~lzOMC">rocket</field></block></value></block></statement></block><block type="every_interval" id=")TJ4s[p=QGT!7}P1#.{2" x="516" y="4413"><value name="interval"><shadow type="longTimePicker" id="pdtilmK0!yo9|L[:Ubxo"><field name="ms">500</field></shadow></value><statement name="HANDLER"><block type="controls_if" id="c[pTtnNDG0n^foOeE{A#"><value name="IF0"><shadow type="logic_boolean" id="P@^?TY;2yg{%0Li2Uf6E"><field name="BOOL">TRUE</field></shadow></value></block></statement></block></xml>